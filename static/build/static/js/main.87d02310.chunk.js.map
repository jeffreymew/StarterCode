{"version":3,"sources":["App.js","http_functions.js","serviceWorker.js","index.js"],"names":["App","state","tasks","taskToAdd","_this2","this","axios","get","then","res","data","setState","catch","error","console","log","_this3","task","post","add_task","push","event","target","value","key","addTask","_this4","react_default","a","createElement","className","FormControl_default","TextField_default","label","onKeyPress","e","handleChange","margin","variant","map","FormControlLabel_default","control","Checkbox_default","checked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAmFeA,6MAzEbC,MAAQ,CACNC,MAAO,GACPC,UAAW,uFAGO,IAAAC,EAAAC,KCLXC,IAAMC,IAAI,8CDOdC,KAAK,SAAAC,GACJ,IAAMP,EAAQO,EAAIC,KAAKR,MACvBE,EAAKO,SAAS,CACZT,MAAOA,MAGVU,MAAM,SAAAC,GACLC,QAAQC,IAAIF,uCAIR,IAAAG,EAAAX,KACFY,EAAOZ,KAAKJ,MAAME,WC3BrB,SAAkBc,GAErB,OADAH,QAAQC,IAAIE,GACLX,IAAMY,KAAK,wCAAyC,CACvDD,UDyBJE,CAASF,GACNT,KAAK,SAAAC,GACJO,EAAKf,MAAMC,MAAMkB,KAAKH,GACtBD,EAAKL,SAAS,CACZT,MAAOc,EAAKf,MAAMC,UAGrBU,MAAM,SAAAC,GACLC,QAAQC,IAAIF,0CAKLQ,GACXhB,KAAKJ,MAAME,UAAYkB,EAAMC,OAAOC,MACpClB,KAAKM,SAAS,CACZR,UAAWkB,EAAMC,OAAOC,QAGR,UAAdF,EAAMG,MACRnB,KAAKoB,UACLJ,EAAMC,OAAOC,MAAQ,qCAIhB,IAAAG,EAAArB,KACP,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,MAAM,aAENC,WAAY,SAACC,GAAD,OAAOT,EAAKU,aAAaD,IACrCE,OAAO,SACPC,QAAQ,aAGRjC,KAAKJ,MAAMC,MAAMqC,IAAI,SAAAtB,GAAI,OACtBU,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACCa,QACEd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAUe,SAAS,IAErBV,MAAOhB,eA/DL2B,aEGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.87d02310.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { get_all_tasks, add_task } from './http_functions';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\n\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    taskToAdd: \"\"\n  }\n\n  componentDidMount() {\n    get_all_tasks()\n      .then(res => {\n        const tasks = res.data.tasks;\n        this.setState({\n          tasks: tasks\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  addTask() {\n    const task = this.state.taskToAdd;\n    add_task(task)\n      .then(res => {\n        this.state.tasks.push(task);\n        this.setState({\n          tasks: this.state.tasks\n        })\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    // event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.state.taskToAdd = event.target.value;\n    this.setState({\n      taskToAdd: event.target.value\n    });\n\n    if (event.key === \"Enter\") {\n      this.addTask();\n      event.target.value = \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FormControl>\n          <TextField\n            label=\"Add A Task\"\n            // value={this.state.taskToAdd}\n            onKeyPress={(e) => this.handleChange(e)}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          { \n            this.state.tasks.map(task => \n              (<FormControlLabel\n                control={\n                  <Checkbox checked={false}/>\n                }\n                label={task}\n              />)\n            )\n          }\n        </FormControl>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","import axios from \"axios\";\r\n\r\nexport function add_task(task) {\r\n    console.log(task);\r\n    return axios.post(\"http://localhost:5000/api/v1/add_task\", {\r\n        task\r\n    })\r\n}\r\n\r\nexport function get_all_tasks() {\r\n    return axios.get(\"http://localhost:5000/api/v1/get_all_tasks\")\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}